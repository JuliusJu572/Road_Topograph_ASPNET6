@using Microsoft.AspNetCore.Antiforgery
@using RoadAppWEB.Models.ViewModel;
@model FacilityRoadNode
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "HubNode Data";
}
<table class="layui-hide" id="demo" lay-filter="test"></table>


<script src="~/lib/layui/layui.js"></script>
<script>
    // 等待页面加载完成
    document.addEventListener('DOMContentLoaded', function () {
        // 创建新的 HTML 内容
        var newSideScroll = document.createElement('div');
        newSideScroll.className = 'layui-side-scroll';

        // 创建新的左侧导航区域
        var newNav = document.createElement('ul');
        newNav.className = 'layui-nav layui-nav-tree';
        newNav.setAttribute('lay-filter', 'test');

        var headItem1 = document.createElement('li');
        headItem1.className = 'layui-nav-item';
        var txtandicon1 = document.createElement('a');
        txtandicon1.text = "设施网格数据";
        var icon1 = document.createElement('i');
        icon1.className = "layui-icon layui-icon-down layui-nav-more";
        txtandicon1.appendChild(icon1);
        headItem1.appendChild(txtandicon1);

        var childClass1 = document.createElement('dl');
        childClass1.className = 'layui-nav-child';
        headItem1.appendChild(childClass1);

        var headItem2 = document.createElement('li');
        headItem2.className = 'layui-nav-item';
        var txtandicon2 = document.createElement('a');
        txtandicon2.text = "拓扑关系数据";
        var icon2 = document.createElement('i');
        icon2.className = "layui-icon layui-icon-down layui-nav-more";
        txtandicon2.appendChild(icon2);
        headItem2.appendChild(txtandicon2);

        var childClass2 = document.createElement('dl');
        childClass2.className = 'layui-nav-child';
        headItem2.appendChild(childClass2);

        newNav.appendChild(headItem1);
        newNav.appendChild(headItem2);

        // 创建导航项
        var navItems = [
            { action: 'InfraData', text: '高架数据' },
            { action: 'RoadData', text: '道路数据' },
            { action: 'NodeData', text: '桩号数据' },
            { action: 'HubNodeData', text: '枢纽桩号数据' },
            { action: 'AllNodeData', text: '桩号归属数据' },
        ];
        var index = 1;
        navItems.forEach(function (item) {
            var navItem = document.createElement('dd');

            var navLink = document.createElement('a');
            var controller = "Map";
            var action = item.action;
            if (action == "@ViewData["SelectedNavItem"]") {
                navItem.className = 'layui-this';
                if (index <= 3) {
                    headItem1.className += " layui-nav-itemed";
                }
                else {
                    headItem2.className += " layui-nav-itemed";
                }
            }
            var route = "/" + controller + '/' + action + '/?username=' + "@ViewData["username"]";

            // 设置正确的 asp-page 属性
            navLink.setAttribute('href', route);
            navLink.innerText = item.text;
            navItem.appendChild(navLink);

            if (index <= 3) {
                childClass1.appendChild(navItem);
            }
            else {
                childClass2.appendChild(navItem);
            }

            index++;
        });

        // 将新的左侧导航区域添加到新的 HTML 内容中
        newSideScroll.appendChild(newNav);

        // 获取原有的容器元素
        var originalSide = document.getElementById('originalSide');

        // 将新的 HTML 内容添加到原有容器元素中
        originalSide.appendChild(newSideScroll);
    });

    // Assuming hubNodes is a List<HubNodeRes>
    var hubNodes = @Html.Raw(Json.Serialize(Model.HubNodeReses));

    // Create hubNodeData by mapping over hubNodes
    var hubNodeData = hubNodes.map(hubNode => ({
        id: hubNode.id,
        starthub_id: hubNode.starthub_id,
        endhub_id: hubNode.endhub_id,
        span: hubNode.span,
        velocity: hubNode.velocity,
        direction: hubNode.direction,
        type: hubNode.type
    }));


    // layUI
    layui.use('table', function () {
        var table = layui.table;
        var limit = 10;
        // Check if the length of data is greater than 20
        if (hubNodeData.length > 20) {
            limit = 20;
        }
        //第一个实例
        table.render({
            elem: '#demo'
            , height: 895
            , data: hubNodeData
            , title: '用户表'
            , page: true //开启分页
            , toolbar: 'default' //开启工具栏，此处显示默认图标，可以自定义模板，详见文档
            , cols: [[ //表头
                { type: 'checkbox', fixed: 'left' }
                , { field: 'id', title: '序号', width: 100, sort: true, fixed: 'left' }
                , { field: 'starthub_id', title: '起始枢纽节点', width: 300 }
                , { field: 'endhub_id', title: '终止枢纽节点', width: 300 }
                , { field: 'span', title: '间距', width: 200 }
                , { field: 'velocity', title: '限速', width: 200 }
                , { field: 'direction', title: '方向', width: 150, sort: true }
                , { field: 'type', title: '类型', width: 150, sort: true }
            ]]
            , limit: limit
        });

    });
</script>